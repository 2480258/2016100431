{"version":3,"sources":[".././test/index.ts","../external \"glob\"","../external \"mocha\"","../external \"path\"","../webpack/bootstrap","../webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,EAAE;AACF,mEAAmE;AACnE,EAAE;AACF,8EAA8E;AAC9E,oDAAoD;AACpD,EAAE;AACF,+EAA+E;AAC/E,kFAAkF;AAClF,iFAAiF;AACjF,gFAAgF;AAChF,oDAAoD;;;AAEpD,iCAAiC;AAEjC,oCAA6B;AAC7B,qCAA6B;AAC7B,gCAAgC;AAChC,kCAAkC;AAClC,gCAAgC;AAChC,kCAAkC;AAClC,sCAA+B;AAE/B,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC;IACtB,EAAE,EAAE,KAAK;IACT,OAAO,EAAE,IAAI;CACd,CAAC,CAAC;AACH,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAEtB,SAAgB,GAAG,CAAC,SAAS,EAAE,GAAG;IAChC,kEAAkE;IAClE,yCAAyC;IACzC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACpC,IAAI,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;QACnD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7B,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;SACjB;QAED,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,8BAA8B;QAC9B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAE9D,IAAI;YACF,qBAAqB;YACrB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1B,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACnB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAClC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,GAAG,CAAC,GAAG,CAAC,CAAC;SACV;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AA1BD,kBA0BC;AAED,yCAAyC;AACzC,6BAA6B;AAC7B,uCAAuC;AACvC,8BAA8B;AAC9B,iBAAiB;AACjB,qBAAqB;AACrB,QAAQ;AACR,2BAA2B;AAE3B,qDAAqD;AAErD,mCAAmC;AACnC,kEAAkE;AAClE,mBAAmB;AACnB,yBAAyB;AACzB,UAAU;AAEV,uCAAuC;AACvC,uEAAuE;AAEvE,cAAc;AACd,gCAAgC;AAChC,kCAAkC;AAClC,gCAAgC;AAChC,yDAAyD;AACzD,qBAAqB;AACrB,mBAAmB;AACnB,cAAc;AACd,cAAc;AACd,wBAAwB;AACxB,kBAAkB;AAClB,UAAU;AACV,UAAU;AACV,QAAQ;AACR,IAAI;AAEJ,+BAA+B;;;;;;;;;AC5F/B,kC;;;;;;;;ACAA,mC;;;;;;;;ACAA,kC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA;UACA;UACA","file":"test/index.js","sourcesContent":["//\n// PLEASE DO NOT MODIFY / DELETE UNLESS YOU KNOW WHAT YOU ARE DOING\n//\n// This file is providing the test runner to use when running extension tests.\n// By default the test runner in use is Mocha based.\n//\n// You can provide your own test runner if you want to override it by exporting\n// a function run(testRoot: string, clb: (error:Error) => void) that the extension\n// host can call to run the tests. The test runner is expected to use console.log\n// to report the results back to the caller. When the tests are finished, return\n// a possible error to the callback or null if none.\n\n// process.env.NODE_ENV = \"test\";\n\nimport * as path from 'path';\nimport * as glob from 'glob';\n// const path = require('path');\n// const Mocha = require('mocha');\n// const glob = require('glob');\n// import * as Mocha from 'mocha';\nimport Mocha = require('mocha')\n\nconst mocha = new Mocha({\n  ui: 'tdd', \t\t// the TDD UI is being used in extension.test.js (suite, test, etc.)\n  timeout: 5000,\n});\nmocha.useColors(true);\n\nexport function run(testsRoot, clb) {\n  // const testFolder = path.resolve(testsRoot, '..', '..', 'test');\n  // console.log(\"testfolder\", testFolder);\n  console.log(\"testsRoot\", testsRoot);\n  glob('*.test.js', { cwd: testsRoot }, (err, files) => {\n    console.log(\"maches\", files);\n    if (err) {\n      return clb(err);\n    }\n\n    console.log(\"adding...\");\n    // Add files to the test suite\n    files.forEach(f => mocha.addFile(path.resolve(testsRoot, f)));\n\n    try {\n      // Run the mocha test\n      console.log(\"running...\");\n      mocha.run(failures => {\n        console.log(\"callback\", failures);\n        clb(null, failures);\n      });\n    } catch (err) {\n      console.error(err);\n      clb(err);\n    }\n  });\n}\n\n// export function run(): Promise<void> {\n//   // Create the mocha test\n//   // const Mocha = require('mocha');\n//   const mocha = new Mocha({\n//     ui: 'bdd',\n//     timeout: 5000,\n//   });\n//   mocha.useColors(true);\n\n//   const testsRoot = path.resolve(__dirname, '..');\n\n//   return new Promise((c, e) => {\n//     glob('**/**.test.js', { cwd: testsRoot }, (err, files) => {\n//       if (err) {\n//         return e(err);\n//       }\n\n//       // Add files to the test suite\n//       files.forEach(f => mocha.addFile(path.resolve(testsRoot, f)));\n\n//       try {\n//         // Run the mocha test\n//         mocha.run(failures => {\n//           if (failures > 0) {\n//             e(new Error(`${failures} tests failed.`));\n//           } else {\n//             c();\n//           }\n//         });\n//       } catch (err) {\n//         e(err);\n//       }\n//     });\n//   });\n// }\n\n// module.exports = testRunner;\n","module.exports = require(\"glob\");;","module.exports = require(\"mocha\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\n__webpack_require__(28);\n__webpack_require__(29);\nreturn __webpack_require__(30);\n"],"sourceRoot":""}