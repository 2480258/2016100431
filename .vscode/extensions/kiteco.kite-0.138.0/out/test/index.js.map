{"version":3,"sources":["../external \"path\"",".././test/index.ts","../external \"source-map-support/register\"","../external \"glob\"","../external \"mocha\"","../webpack/bootstrap","../webpack/startup"],"names":[],"mappings":";;;;;;;;AAAA,kC;;;;;;;;ACAA,0EAA0E;AAC1E,iDAAiD;;;AAEjD,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAE9B,uBAAqC;AACrC,oCAA6B;AAC7B,oCAA6B;AAC7B,qCAA+B;AAE/B,SAAgB,GAAG;IACjB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC;QACtB,EAAE,EAAE,KAAK;QACT,OAAO,EAAE,IAAI;KACd,CAAC,CAAC;IACH,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAEtB,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC9B,IAAI,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YACpD,IAAI,GAAG,EAAE;gBACP,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;YAED,8BAA8B;YAC9B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAE/D,IAAI;gBACF,qBAAqB;gBACrB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACnB,IAAI,QAAQ,GAAG,CAAC,EAAE;wBAChB,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,QAAQ,gBAAgB,CAAC,CAAC,CAAC;qBAC7C;yBAAM;wBACL,GAAG,EAAE,CAAC;qBACP;gBACH,CAAC,CAAC,CAAC;aACJ;YAAC,OAAO,GAAG,EAAE;gBACZ,GAAG,CAAC,GAAG,CAAC,CAAC;aACV;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AA/BD,kBA+BC;;;;;;;ACzCD,yD;;;;;;ACAA,kC;;;;;;ACAA,mC;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"index.js","sourcesContent":["module.exports = require(\"path\");;","// This file provides the test runner to use when running extension tests,\n// based off the example in VSCode documentation.\n\nprocess.env.NODE_ENV = \"test\";\n\nimport 'source-map-support/register';\nimport * as path from 'path';\nimport * as glob from 'glob';\nimport Mocha = require('mocha')\n\nexport function run(): Promise<void> {\n  const mocha = new Mocha({\n    ui: 'bdd', \t\t// the TDD UI is being used in extension.test.js (suite, test, etc.)\n    timeout: 5000,\n  });\n  mocha.useColors(true);\n\n  const outTestDir = path.resolve(__dirname);\n  return new Promise((res, rej) => {\n    glob('*.test.js', { cwd: outTestDir }, (err, files) => {\n      if (err) {\n        return rej(err);\n      }\n\n      // Add files to the test suite\n      files.forEach(f => mocha.addFile(path.resolve(outTestDir, f)));\n\n      try {\n        // Run the mocha test\n        mocha.run(failures => {\n          if (failures > 0) {\n            rej(new Error(`${failures} tests failed.`));\n          } else {\n            res();\n          }\n        });\n      } catch (err) {\n        rej(err);\n      }\n    });\n  });\n}\n","module.exports = require(\"source-map-support/register\");;","module.exports = require(\"glob\");;","module.exports = require(\"mocha\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(3);\n"],"sourceRoot":""}